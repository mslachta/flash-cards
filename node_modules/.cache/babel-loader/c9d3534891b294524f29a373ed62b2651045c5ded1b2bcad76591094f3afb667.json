{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cards: {}\n};\nconst sliceOptions = {\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    // [Step 14] Has an addCard action. This action will receive a payload of the form { id: '123', front: 'front of card', back: 'back of card'}.\n    addCard: (state, action) => {\n      return {\n        ...state,\n        cards: {\n          ...state.cards,\n          [action.payload.id]: {\n            id: action.payload.id,\n            front: action.payload.front,\n            back: action.payload.back\n          }\n        }\n      };\n    }\n  }\n};\n\n// [Step 14] Is added to the store.\nexport const cardsSlice = createSlice(sliceOptions);\n\n// [Step 14] Has a selector that returns a card with the given id\nexport const selectCardsById = selectedId => state => {\n  return Object.keys(state.cards.cards).filter(key => key === selectedId).reduce((obj, key) => {\n    obj[key] = state.cards.cards[key];\n    return obj;\n  }, {});\n};\nexport const {\n  addCard\n} = cardsSlice.actions;\nexport default cardsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cards","sliceOptions","name","reducers","addCard","state","action","payload","id","front","back","cardsSlice","selectCardsById","selectedId","Object","keys","filter","key","reduce","obj","actions","reducer"],"sources":["/Users/martin/Downloads/codecademy_20231009_flashcards-master/src/features/cards/cardsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    cards: {}\n}\n\nconst sliceOptions = {\n    name: \"cards\",\n    initialState: initialState,\n    reducers: {\n        // [Step 14] Has an addCard action. This action will receive a payload of the form { id: '123', front: 'front of card', back: 'back of card'}.\n        addCard: (state, action) => {\n            return {\n                ...state,\n                cards: {\n                    ...state.cards,\n                    [action.payload.id]: {\n                        id: action.payload.id,\n                        front: action.payload.front,\n                        back: action.payload.back\n                    }\n                }\n            }\n        }\n    }\n}\n\n// [Step 14] Is added to the store.\nexport const cardsSlice = createSlice(sliceOptions)\n\n// [Step 14] Has a selector that returns a card with the given id\nexport const selectCardsById = (selectedId) => (state) => {\n\n    return Object\n        .keys(state.cards.cards)\n        .filter(key => key === selectedId)\n        .reduce((obj, key) => {\n            obj[key] = state.cards.cards[key]\n            return obj\n        }, {})\n}\n\nexport const { addCard } = cardsSlice.actions\nexport default cardsSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,CAAC;AACZ,CAAC;AAED,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,OAAO;EACbH,YAAY,EAAEA,YAAY;EAC1BI,QAAQ,EAAE;IACN;IACAC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB,OAAO;QACH,GAAGD,KAAK;QACRL,KAAK,EAAE;UACH,GAAGK,KAAK,CAACL,KAAK;UACd,CAACM,MAAM,CAACC,OAAO,CAACC,EAAE,GAAG;YACjBA,EAAE,EAAEF,MAAM,CAACC,OAAO,CAACC,EAAE;YACrBC,KAAK,EAAEH,MAAM,CAACC,OAAO,CAACE,KAAK;YAC3BC,IAAI,EAAEJ,MAAM,CAACC,OAAO,CAACG;UACzB;QACJ;MACJ,CAAC;IACL;EACJ;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGb,WAAW,CAACG,YAAY,CAAC;;AAEnD;AACA,OAAO,MAAMW,eAAe,GAAIC,UAAU,IAAMR,KAAK,IAAK;EAEtD,OAAOS,MAAM,CACRC,IAAI,CAACV,KAAK,CAACL,KAAK,CAACA,KAAK,CAAC,CACvBgB,MAAM,CAACC,GAAG,IAAIA,GAAG,KAAKJ,UAAU,CAAC,CACjCK,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;IAClBE,GAAG,CAACF,GAAG,CAAC,GAAGZ,KAAK,CAACL,KAAK,CAACA,KAAK,CAACiB,GAAG,CAAC;IACjC,OAAOE,GAAG;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;AACd,CAAC;AAED,OAAO,MAAM;EAAEf;AAAQ,CAAC,GAAGO,UAAU,CAACS,OAAO;AAC7C,eAAeT,UAAU,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}